import React, { useState, useEffect, useCallback, useRef } from 'react';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import {
  Box,
  Typography,
  Button,
  CircularProgress,
  Alert,
  Paper,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions
} from '@mui/material';
import KanbanColumn from './KanbanColumn';
import CreateTicketModal from './CreateTicketModal';
import { getColumns, moveCard } from '../services/api';
import AddIcon from '@mui/icons-material/Add';
import FilterAltIcon from '@mui/icons-material/FilterAlt';

const KanbanBoard = () => {
  console.log('üöÄ KanbanBoard mount');
  
  const [columns, setColumns] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [rcZmFilter, setRcZmFilter] = useState('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ');
  const [wipLimitError, setWipLimitError] = useState(null);
  // –£–±–∏—Ä–∞–µ–º isDragging –∏–∑ state - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ ref
  // const [isDragging, setIsDragging] = useState(false);
  
  // Refs –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  const isDraggingRef = useRef(false);
  const columnsRef = useRef([]);
  
  // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π useEffect –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è mount/unmount
  useEffect(() => {
    console.log('üü¢ KanbanBoard MOUNT - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω');
    return () => {
      console.log('üî¥ KanbanBoard UNMOUNT - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω!');
    };
  }, []);
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º ref —Å state
  useEffect(() => {
    columnsRef.current = columns;
  }, [columns]);

  // –û–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞
  const filterOptions = [
    { value: '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ', label: '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ' },
    { value: 'CENTR', label: '–¶–µ–Ω—Ç—Ä' },
    { value: 'UG', label: '–Æ–≥' },
    { value: 'URAL', label: '–£—Ä–∞–ª' },
    { value: 'SIBIR', label: '–°–∏–±–∏—Ä—å' }
  ];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤ —Ä—É—Å—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  const convertConstantToRussian = (constant) => {
    const option = filterOptions.find(opt => opt.value === constant);
    return option ? option.label : constant;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
  const filterCards = (cards, filter) => {
    if (filter === '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ') {
      return cards;
    }
    const russianValue = convertConstantToRussian(filter);
    return cards.filter(card => card.rc_zm === russianValue);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ –ø–æ–ø–∞–≤—à–∏—Ö –≤ —Ñ–∏–ª—å—Ç—Ä
  const getFilteredOutCards = (cards, filter) => {
    if (filter === '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ') {
      return [];
    }
    const russianValue = convertConstantToRussian(filter);
    return cards.filter(card => !card.rc_zm || card.rc_zm !== russianValue);
  };

  // –°–æ–∑–¥–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ swimlane - –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ —Ä–µ–Ω–¥–µ—Ä –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  const fetchColumns = useCallback(async (forceFetch = false) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º isDragging —á–µ—Ä–µ–∑ ref —á—Ç–æ–±—ã –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –µ–≥–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      if (!forceFetch && isDraggingRef.current) {
        return;
      }
      
      const columnsData = await getColumns();
      setColumns(columnsData);
    } catch (error) {
      console.error('‚ùå Fetch error:', error);
    } finally {
      setLoading(false);
    }
  }, []); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  useEffect(() => {
    fetchColumns();
  }, []);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ columns
  useEffect(() => {
    console.log('üìä Columns updated:', columns.length, 'columns');
  }, [columns]); // –£–±–∏—Ä–∞–µ–º isDragging –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  const onDragStart = useCallback((result) => {
    console.log('üéØ onDragStart');
    isDraggingRef.current = true;
  }, []);

  const onDragEnd = useCallback(async (result) => {
    console.log('üéØ onDragEnd start');
    
    const { destination, source, draggableId } = result;

    if (!destination) {
      console.log('‚ùå No destination');
      isDraggingRef.current = false;
      return;
    }

    if (
      destination.droppableId === source.droppableId &&
      destination.index === source.index
    ) {
      console.log('‚ùå No movement');
      isDraggingRef.current = false;
      return;
    }

    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ drag & drop
    const parseDroppableId = (id) => {
      const parts = id.split('-');
      const isFilteredOut = parts.includes('out');
      const columnId = parseInt(parts[parts.length - 1].replace('col_', ''));
      return { columnId, isFilteredOut };
    };

    const sourceInfo = parseDroppableId(source.droppableId);
    const destInfo = parseDroppableId(destination.droppableId);
    const cardId = parseInt(draggableId.replace('card-', ''));
    
    // 1. –û–ü–¢–ò–ú–ò–°–¢–ò–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï - –æ–±–Ω–æ–≤–ª—è–µ–º UI –ª–æ–∫–∞–ª—å–Ω–æ
    console.log('‚ö° Optimistic update');
    
    // –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ö–æ–¥–Ω—É—é –∏ —Ü–µ–ª–µ–≤—É—é –∫–æ–ª–æ–Ω–∫–∏
    const sourceColumnIndex = columnsRef.current.findIndex(col => col.id === sourceInfo.columnId);
    const destColumnIndex = columnsRef.current.findIndex(col => col.id === destInfo.columnId);
    
    if (sourceColumnIndex !== -1 && destColumnIndex !== -1) {
      const sourceColumn = columnsRef.current[sourceColumnIndex];
      const cardIndex = sourceColumn.cards.findIndex(card => card.id === cardId);
      
      if (cardIndex !== -1) {
        const movedCard = sourceColumn.cards[cardIndex];
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        const newColumns = columnsRef.current.map((column, index) => {
          if (index === sourceColumnIndex) {
            // –ò—Å—Ö–æ–¥–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞: —É–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            const newCards = column.cards.filter(card => card.id !== cardId);
            return {
              ...column,
              cards: newCards,
              cards_count: newCards.length
            };
          } else if (index === destColumnIndex) {
            // –¶–µ–ª–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            const newCards = [...column.cards];
            newCards.splice(destination.index, 0, movedCard);
            return {
              ...column,
              cards: newCards,
              cards_count: newCards.length
            };
          } else {
            // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            return column;
          }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ UI –æ—Ç–∫–ª–∏–∫–∞
        setColumns(newColumns);
        console.log('‚úÖ UI updated with cards_count:', {
          sourceCount: newColumns[sourceColumnIndex].cards_count,
          destCount: newColumns[destColumnIndex].cards_count
        });
      }
    }
    
    // 2. –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ü–†–û–° –ù–ê –°–ï–†–í–ï–† (–≤ —Ñ–æ–Ω–µ, –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI)
    try {
      const moveData = {
        from_column: sourceInfo.columnId,
        to_column: destInfo.columnId,
        new_position: destination.index
      };
      
      console.log('üì° API request');
      const response = await moveCard(cardId, moveData);
      console.log('‚úÖ Server confirmed');
      
    } catch (err) {
      console.error('‚ùå API error:', err);
      
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      console.log('üîÑ Rollback');
      try {
        const columnsData = await getColumns();
        setColumns(columnsData);
        console.log('‚úÖ Rollback complete');
      } catch (fetchError) {
        console.error('‚ùå Rollback failed:', fetchError);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π WIP –ª–∏–º–∏—Ç–∞
      if (err.response?.status === 400 && err.response?.data?.detail?.includes('–ò—Å—á–µ—Ä–ø–∞–Ω WIP –ª–∏–º–∏—Ç')) {
        setWipLimitError(err.response.data.detail);
      } else {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: ' + (err.response?.data?.detail || err.message));
      }
    }
    console.log('üéØ onDragEnd complete');
    isDraggingRef.current = false;
  }, []); // –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  const handleCardCreated = useCallback(async (newCard) => {
    try {
      const columnsData = await getColumns();
      setColumns(columnsData);
    } catch (error) {
      console.error('‚ùå Update after create error:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫');
    }
  }, []); // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç fetchColumns

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={{ p: 3 }}>
        <Typography color="error">{error}</Typography>
      </Box>
    );
  }

  // –°–æ–∑–¥–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –º–µ–º–æ–∏–∑–∞—Ü–∏–∏
  const getFilteredColumns = () => {
    return columns.map(column => {
      const filteredCards = filterCards(column.cards, rcZmFilter);
      const filteredOutCards = getFilteredOutCards(column.cards, rcZmFilter);
      
      return {
        ...column,
        filteredCards,
        filteredOutCards
      };
    });
  };

  const filteredColumns = getFilteredColumns();
  const hasFilteredOutCards = rcZmFilter !== '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ' && 
    filteredColumns.some(col => col.filteredOutCards.length > 0);

  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
  const preparedFilteredColumns = filteredColumns.map(column => ({
    ...column,
    cards: column.filteredCards
  }));

  const preparedFilteredOutColumns = filteredColumns.map(column => ({
    ...column,
    cards: column.filteredOutCards
  }));
  
  return (
    <DragDropContext onDragStart={onDragStart} onDragEnd={onDragEnd}>
      <Box sx={{ p: 3 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <FormControl sx={{ minWidth: 200 }}>
            <InputLabel>–§–∏–ª—å—Ç—Ä –ø–æ –†–¶ –ó–ú</InputLabel>
            <Select
              value={rcZmFilter}
              label="–§–∏–ª—å—Ç—Ä –ø–æ –†–¶ –ó–ú"
              onChange={(e) => setRcZmFilter(e.target.value)}
              startAdornment={<FilterAltIcon sx={{ mr: 1, color: 'action.active' }} />}
            >
              {filterOptions.map((option) => (
                <MenuItem key={option.value} value={option.value}>
                  {option.label}
                </MenuItem>
              ))}
            </Select>
          </FormControl>

          <Button
            variant="contained"
            onClick={() => setIsCreateModalOpen(true)}
            startIcon={<AddIcon />}
            sx={{ 
              bgcolor: '#fadfa8',
              color: '#000000',
              '&:hover': {
                bgcolor: '#f0d495',
              }
            }}
          >
            –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç
          </Button>
        </Box>

        {/* –í–µ—Ä—Ö–Ω–∏–π swimlane - –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
        <Box sx={{ mb: hasFilteredOutCards ? 4 : 0 }}>
          {rcZmFilter !== '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ' && (
            <Typography variant="h6" sx={{ mb: 2, color: 'primary.main' }}>
              –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã ({filterOptions.find(opt => opt.value === rcZmFilter)?.label || rcZmFilter})
            </Typography>
          )}
          <Box sx={{ display: 'flex', gap: 3, overflowX: 'auto', pb: 2 }}>
            {preparedFilteredColumns.map((column) => (
              <KanbanColumn
                key={`filtered-${column.id}`}
                column={column}
                swimlanePrefix="swimlane-filtered"
              />
            ))}
          </Box>
        </Box>

        {/* –ù–∏–∂–Ω–∏–π swimlane - –Ω–µ–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
        {hasFilteredOutCards && (
          <Box>
            <Typography variant="h6" sx={{ mb: 2, color: 'text.secondary' }}>
              –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã
            </Typography>
            <Box sx={{ display: 'flex', gap: 3, overflowX: 'auto', pb: 2 }}>
              {preparedFilteredOutColumns.map((column) => (
                <KanbanColumn
                  key={`filtered-out-${column.id}`}
                  column={column}
                  swimlanePrefix="swimlane-filtered-out"
                />
              ))}
            </Box>
          </Box>
        )}

        <CreateTicketModal
          open={isCreateModalOpen}
          onClose={() => setIsCreateModalOpen(false)}
          onSuccess={handleCardCreated}
          columnId={columns[0]?.id}
        />

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—à–∏–±–∫–∏ WIP –ª–∏–º–∏—Ç–∞ */}
        <Dialog
          open={!!wipLimitError}
          onClose={() => setWipLimitError(null)}
          maxWidth="sm"
          fullWidth
        >
          <DialogTitle sx={{ color: 'error.main' }}>
            WIP –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω
          </DialogTitle>
          <DialogContent>
            <Typography>
              {wipLimitError}
            </Typography>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setWipLimitError(null)} variant="contained">
              –ü–æ–Ω—è—Ç–Ω–æ
            </Button>
          </DialogActions>
        </Dialog>
      </Box>
    </DragDropContext>
  );
};

export default KanbanBoard; 