# Специальный Dockerfile для macOS с обходом SSL проблем
# Этап сборки
FROM node:20-alpine AS build

# Полный обход SSL проблем на macOS
RUN echo "http://dl-cdn.alpinelinux.org/alpine/v3.18/main" > /etc/apk/repositories && \
    echo "http://dl-cdn.alpinelinux.org/alpine/v3.18/community" >> /etc/apk/repositories && \
    apk update --allow-untrusted && \
    apk add --no-cache --allow-untrusted ca-certificates wget curl && \
    update-ca-certificates

# Устанавливаем дополнительные пакеты для сборки
RUN apk add --no-cache --allow-untrusted python3 make g++

WORKDIR /app

# Настраиваем npm с таймаутами и retry
RUN npm config set fetch-timeout 600000 && \
    npm config set fetch-retry-mintimeout 10000 && \
    npm config set fetch-retry-maxtimeout 60000 && \
    npm config set fetch-retries 3 && \
    npm config set registry https://registry.npmjs.org/ && \
    npm config set strict-ssl false

# Копируем файлы package.json и package-lock.json для кеширования слоя зависимостей
COPY package*.json ./

# Устанавливаем зависимости с расширенными таймаутами
RUN npm install --timeout=600000 --no-audit --no-fund

# Копируем исходный код
COPY . .

# Собираем приложение с увеличенным heap размером
RUN NODE_OPTIONS="--max-old-space-size=4096" npm run build

# Этап production
FROM nginx:alpine AS production

# Копируем собранное приложение из этапа сборки
COPY --from=build /app/dist /usr/share/nginx/html

# Копируем конфигурацию nginx
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Открываем порт
EXPOSE 80

# Запускаем nginx
CMD ["nginx", "-g", "daemon off;"] 