"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
"""

import re
from typing import Optional
try:
    from pydantic_settings import BaseSettings
except ImportError:
    from pydantic import BaseSettings
from pydantic import Field, field_validator, SecretStr
from pydantic.networks import PostgresDsn, HttpUrl
import os


class Settings(BaseSettings):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    """
    
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    database_url: PostgresDsn = Field(
        default="postgresql://postgres:postgres@db:5432/kanban",
        env="DATABASE_URL",
        description="URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
    )
    
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    admin_username: str = Field(
        default="admin",
        env="ADMIN_USERNAME", 
        min_length=3,
        max_length=50,
        description="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    )
    
    admin_password: SecretStr = Field(
        ...,  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
        env="ADMIN_PASSWORD",
        min_length=8,
        description="–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤)"
    )
    
    admin_telegram: str = Field(
        default="@admin",
        env="ADMIN_TELEGRAM",
        min_length=2,
        max_length=100,
        description="Telegram –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (@username –∏–ª–∏ chat_id)"
    )
    
    # Telegram Bot
    telegram_bot_token: Optional[SecretStr] = Field(
        default=None,
        env="TELEGRAM_BOT_TOKEN",
        description="–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app_name: str = Field(
        default="Kanban Tracker",
        env="APP_NAME",
        description="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    )
    
    debug: bool = Field(
        default=False,
        env="DEBUG",
        description="–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏"
    )
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    secret_key: str = Field(
        default="your-secret-key-change-in-production",
        env="SECRET_KEY",
        min_length=32,
        description="–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ JWT —Ç–æ–∫–µ–Ω–æ–≤"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ JWT
    jwt_algorithm: str = Field(
        default="HS256",
        env="JWT_ALGORITHM",
        description="–ê–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤"
    )
    
    jwt_expire_minutes: int = Field(
        default=30,
        env="JWT_EXPIRE_MINUTES",
        ge=1,
        le=10080,  # –ú–∞–∫—Å–∏–º—É–º –Ω–µ–¥–µ–ª—è
        description="–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ JWT —Ç–æ–∫–µ–Ω–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö"
    )

    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"
        case_sensitive = False
        validate_assignment = True

    @field_validator('admin_username')
    @classmethod
    def validate_admin_username(cls, v):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not re.match(r'^[a-zA-Z0-9_-]+$', v):
            raise ValueError(
                '–ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –¥–µ—Ñ–∏—Å—ã'
            )
        return v
    
    @field_validator('admin_password')
    @classmethod
    def validate_admin_password(cls, v):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        password = v.get_secret_value() if isinstance(v, SecretStr) else str(v)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        unsafe_passwords = [
            'admin', 'password', '123456', 'qwerty', 
            'your_secure_password_here', 'change_me'
        ]
        
        if password.lower() in unsafe_passwords:
            raise ValueError(
                f'–ü–∞—Ä–æ–ª—å "{password}" –Ω–µ–±–µ–∑–æ–ø–∞—Å–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å –≤ ADMIN_PASSWORD'
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
        if len(password) < 8:
            raise ValueError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤')
        
        has_upper = any(c.isupper() for c in password)
        has_lower = any(c.islower() for c in password)
        has_digit = any(c.isdigit() for c in password)
        
        if not (has_upper and has_lower and has_digit):
            raise ValueError(
                '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É, '
                '–æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É –∏ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É'
            )
        
        return v
    
    @field_validator('admin_telegram')
    @classmethod
    def validate_admin_telegram(cls, v):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è Telegram –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç @username –∏–ª–∏ chat_id (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)
        if v.startswith('@'):
            # Username —Ñ–æ—Ä–º–∞—Ç
            if not re.match(r'^@[a-zA-Z0-9_]{5,32}$', v):
                raise ValueError(
                    'Telegram username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username '
                    '(5-32 —Å–∏–º–≤–æ–ª–∞, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)'
                )
        elif v.isdigit():
            # Chat ID —Ñ–æ—Ä–º–∞—Ç
            if len(v) < 5 or len(v) > 15:
                raise ValueError('Telegram chat_id –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5-15 —Ü–∏—Ñ—Ä')
        else:
            raise ValueError(
                'Telegram –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username –∏–ª–∏ chat_id (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)'
            )
        
        return v
    
    @field_validator('telegram_bot_token')
    @classmethod
    def validate_telegram_bot_token(cls, v):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ Telegram –±–æ—Ç–∞"""
        if v is None:
            return v
            
        token = v.get_secret_value() if isinstance(v, SecretStr) else str(v)
        
        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—É—Å—Ç–æ–π, —Ç–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)
        if not token or token.strip() == '':
            return None
        
        # –§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞: XXXXXXXXX:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
        if not re.match(r'^\d{8,10}:[a-zA-Z0-9_-]{35}$', token):
            raise ValueError(
                '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ Telegram –±–æ—Ç–∞. '
                '–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram'
            )
        
        return v
    
    @field_validator('secret_key')
    @classmethod
    def validate_secret_key(cls, v):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞"""
        if v == "your-secret-key-change-in-production":
            raise ValueError(
                '–í–ê–ñ–ù–û: –ò–∑–º–µ–Ω–∏—Ç–µ SECRET_KEY –≤ production –æ–∫—Ä—É–∂–µ–Ω–∏–∏! '
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: openssl rand -hex 32'
            )
        
        if len(v) < 32:
            raise ValueError('SECRET_KEY –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞')
        
        return v

    def get_database_url(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ —Å—Ç—Ä–æ–∫—É"""
        return str(self.database_url)
    
    def get_admin_password(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return self.admin_password.get_secret_value()
    
    def get_telegram_bot_token(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞"""
        if self.telegram_bot_token:
            return self.telegram_bot_token.get_secret_value()
        return None
    
    def is_production(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ production"""
        return not self.debug and os.getenv('ENV', '').lower() == 'production'
    
    def validate_production_ready(self) -> list[str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ production —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é"""
        issues = []
        
        if self.debug:
            issues.append("DEBUG=True –≤ production –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ")
        
        if self.secret_key == "your-secret-key-change-in-production":
            issues.append("SECRET_KEY –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω –≤ production")
        
        admin_pass = self.get_admin_password()
        if len(admin_pass) < 12:
            issues.append("–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π –¥–ª—è production")
        
        if not self.get_telegram_bot_token():
            issues.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å TELEGRAM_BOT_TOKEN –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        return issues


# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
try:
    settings = Settings()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è production
    if settings.is_production():
        production_issues = settings.validate_production_ready()
        if production_issues:
            raise ValueError(
                "–ü—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è production:\n" + 
                "\n".join(f"- {issue}" for issue in production_issues)
            )
    
except Exception as e:
    print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò: {e}")
    print("\nüìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("- ADMIN_PASSWORD (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤)")
    print("- DATABASE_URL (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: postgresql://postgres:postgres@db:5432/kanban)")
    print("- ADMIN_USERNAME (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: admin)")
    print("- ADMIN_TELEGRAM (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: @admin)")
    print("- TELEGRAM_BOT_TOKEN (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)")
    print("- SECRET_KEY (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è production)")
    print("\nüîß –ü—Ä–∏–º–µ—Ä .env —Ñ–∞–π–ª–∞:")
    print("ADMIN_PASSWORD=YourSecurePassword123")
    print("ADMIN_USERNAME=admin")
    print("ADMIN_TELEGRAM=@yourtelegram")
    print("TELEGRAM_BOT_TOKEN=1234567890:AAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIII")
    print("SECRET_KEY=$(openssl rand -hex 32)")
    raise SystemExit(1)


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_settings() -> Settings:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return settings 