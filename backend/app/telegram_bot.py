import os
import requests
import logging
from typing import Optional
from .models import User, Card

logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"

def send_telegram_message(chat_id: str, message: str) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    
    Args:
        chat_id: ID —á–∞—Ç–∞ –∏–ª–∏ username (@username)
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    if not TELEGRAM_BOT_TOKEN:
        logger.warning("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        return False
        
    try:
        url = f"{TELEGRAM_API_URL}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": message,
            "parse_mode": "Markdown"
        }
        
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        
        logger.info(f"Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        return True
        
    except requests.exceptions.RequestException as e:
        try:
            error_details = e.response.json() if hasattr(e, 'response') and e.response else "–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏"
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
            logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ Telegram API: {error_details}")
        except:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

def send_approver_notification(approver: User, card: Card) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å—É—é—â–µ–º—É –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞ —Ç–∏–∫–µ—Ç
    
    Args:
        approver: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Å–æ–≥–ª–∞—Å—É—é—â–∏–π
        card: –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–∏–∫–µ—Ç–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    if not approver.telegram:
        logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {approver.username} –Ω–µ —É–∫–∞–∑–∞–Ω Telegram")
        return False
        
    message = f"""
üîî *–ù–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ*

üìã **–¢–∏–∫–µ—Ç:** {card.title}
üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {card.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚≠ê **Story Points:** {card.story_points or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —Å–æ–≥–ª–∞—Å—É—é—â–∏–º –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞.
    """.strip()
    
    return send_telegram_message(approver.telegram, message)

def send_approver_change_notification(old_approver: Optional[User], new_approver: Optional[User], card: Card) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–æ–≥–ª–∞—Å—É—é—â–µ–≥–æ
    
    Args:
        old_approver: –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å–æ–≥–ª–∞—Å—É—é—â–∏–π (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
        new_approver: –ù–æ–≤—ã–π —Å–æ–≥–ª–∞—Å—É—é—â–∏–π (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
        card: –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–∏–∫–µ—Ç–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
    """
    success = True
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–≥–ª–∞—Å—É—é—â–µ–≥–æ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    if old_approver and old_approver.telegram:
        message = f"""
‚ÑπÔ∏è *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è*

üìã **–¢–∏–∫–µ—Ç:** {card.title}

–í—ã –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–≥–ª–∞—Å—É—é—â–∏–º –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞.
        """.strip()
        
        if not send_telegram_message(old_approver.telegram, message):
            success = False
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–≥–ª–∞—Å—É—é—â–µ–≥–æ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
    if new_approver and new_approver.telegram:
        if not send_approver_notification(new_approver, card):
            success = False
    
    return success 